{"id":531,"name":"RegisterNpcApi","kind":256,"kindString":"Interface","flags":{},"children":[],"sources":[{"fileName":"src/index.ts","fullFileName":"/home/runner/work/npc-vortex-api/npc-vortex-api/src/index.ts","line":296,"character":17,"url":"https://github.com/toebeann/npc-vortex-api/blob/a1e2253/src/index.ts#L296"}],"signatures":[{"id":532,"name":"RegisterNpcApi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[{"kind":"text","text":"Registers an "},{"kind":"inline-tag","tag":"@link","text":"npc procedure","target":"https://toebeann.github.io/npc/stable/?page=Interface.Npc"},{"kind":"text","text":" at a given path. The procedure callback will then be available to other processes via the npc protocol."}],"blockTags":[{"tag":"@remarks","content":[{"kind":"text","text":"* The procedure callback will only receive a single argument when called. It is your responsibility to validate this argument.\nWe recommend "},{"kind":"inline-tag","tag":"@link","text":"Zod","target":"https://zod.dev"},{"kind":"text","text":" for validation.\n* registerNpcApi should be called within the context.once callback."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// subnautica-support/src/index.ts\nimport { join } from \"path\";\nimport { RegisterNpcApi } from \"@toebean/npc-vortex-api\";\nimport { types } from \"vortex-api\";\nimport { getQmmInstallation } from \"./api\";\n\nexport default function main(context: types.IExtensionContext) {\n    // make sure to only call registerNpcApi within the context.once callback\n    context.once(async () => {\n        const registerNpcApi: RegisterNpcApi = context.api.ext.registerNpcApi; // assign the interface to the function for TypeScript type safety.\n\n        // register the function `getQmmInstallation` namespaced by the name of the extenstion\n        const endpoint = await registerNpcApi?.(join('subnauticaSupport', 'getQmmInstallation'), getQmmInstallation);\n        // endpoint = 'vortex\\\\subnauticaSupport\\\\getQmmInstallation'\n        // `getQmmInstallation` is now available via the npc protocol at this address.\n\n        if (!endpoint) {\n            // if endpoint is undefined, this is likely because the user does not have this extension installed\n            // you can confirm this by inspecting their installed extensions with context.api.getState().session.extensions.installed\n        }\n    });\n}\n```"}]},{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"inline-tag","tag":"@link","text":"Promise","target":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},{"kind":"text","text":" which when resolved, indicates the callback is available to be called via the "},{"kind":"inline-tag","tag":"@link","text":"npc","target":"https://toebeann.github.io/npc/stable/?page=Interface.Npc"},{"kind":"text","text":" protocol at the endpoint\npassed to the "},{"kind":"inline-tag","tag":"@link","text":"then","target":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then"},{"kind":"text","text":" handler."}]}]},"parameters":[{"id":533,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"The path at which the procedure will be available.\nIt is generally recommended to combine the name of your extension with the name of the function."}]},"type":{"type":"intrinsic","name":"string"},"text":{"comment":"<p>The path at which the procedure will be available.\nIt is generally recommended to combine the name of your extension with the name of the function.</p>\n"}},{"id":534,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"The underlying callback powering the procedure to expose at the path."}]},"type":{"type":"reflection","declaration":{"id":535,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"node_modules/.pnpm/zod@3.21.0/node_modules/zod/lib/types.d.ts","line":681,"character":139}],"signatures":[{"id":536,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":537,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"tuple","elements":[{"type":"intrinsic","name":"unknown"},{"type":"rest","elementType":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}}}]}}],"type":{"type":"intrinsic","name":"unknown"}}]}},"text":{"comment":"<p>The underlying callback powering the procedure to expose at the path.</p>\n"}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}],"name":"Promise","qualifiedName":"Promise","package":"typescript"},"is":{"declaration":false},"location":{"query":"Interface.RegisterNpcApi","hash":"RegisterNpcApi"},"text":{"comment":"<p>Registers an <a href=\"https://toebeann.github.io/npc/stable/?page=Interface.Npc\">npc procedure</a> at a given path. The procedure callback will then be available to other processes via the npc protocol.</p>\n<h5>Remarks:</h5><ul>\n<li>The procedure callback will only receive a single argument when called. It is your responsibility to validate this argument.\nWe recommend <a href=\"https://zod.dev\">Zod</a> for validation.</li>\n<li>registerNpcApi should be called within the context.once callback.</li>\n</ul>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// subnautica-support/src/index.ts</span>\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">join</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>path<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">RegisterNpcApi</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@toebean/npc-vortex-api<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">types</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>vortex-api<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">getQmmInstallation</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>./api<span class=\"pl-pds\">\"</span></span>;\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">main</span>(<span class=\"pl-v\">context</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">types</span>.<span class=\"pl-en\">IExtensionContext</span>) {\n    <span class=\"pl-c\">// make sure to only call registerNpcApi within the context.once callback</span>\n    <span class=\"pl-smi\">context</span>.<span class=\"pl-en\">once</span>(<span class=\"pl-k\">async</span> () <span class=\"pl-k\">=></span> {\n        <span class=\"pl-k\">const</span> <span class=\"pl-c1\">registerNpcApi</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">RegisterNpcApi</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">context</span>.<span class=\"pl-smi\">api</span>.<span class=\"pl-smi\">ext</span>.<span class=\"pl-smi\">registerNpcApi</span>; <span class=\"pl-c\">// assign the interface to the function for TypeScript type safety.</span>\n\n        <span class=\"pl-c\">// register the function `getQmmInstallation` namespaced by the name of the extenstion</span>\n        <span class=\"pl-k\">const</span> <span class=\"pl-c1\">endpoint</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">registerNpcApi</span>?.(<span class=\"pl-en\">join</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>subnauticaSupport<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>getQmmInstallation<span class=\"pl-pds\">'</span></span>), <span class=\"pl-smi\">getQmmInstallation</span>);\n        <span class=\"pl-c\">// endpoint = 'vortex\\\\subnauticaSupport\\\\getQmmInstallation'</span>\n        <span class=\"pl-c\">// `getQmmInstallation` is now available via the npc protocol at this address.</span>\n\n        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span><span class=\"pl-smi\">endpoint</span>) {\n            <span class=\"pl-c\">// if endpoint is undefined, this is likely because the user does not have this extension installed</span>\n            <span class=\"pl-c\">// you can confirm this by inspecting their installed extensions with context.api.getState().session.extensions.installed</span>\n        }\n    });\n}\n</code></pre>\n<h5>Returns:</h5><p>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> which when resolved, indicates the callback is available to be called via the <a href=\"https://toebeann.github.io/npc/stable/?page=Interface.Npc\">npc</a> protocol at the endpoint\npassed to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\">then</a> handler.</p>\n"},"sources":[{"fileName":"src/index.ts","fullFileName":"/home/runner/work/npc-vortex-api/npc-vortex-api/src/index.ts","line":334,"character":4,"url":"https://github.com/toebeann/npc-vortex-api/blob/a1e2253/src/index.ts#L334"}],"parentId":531},{"id":538,"name":"RegisterNpcApi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[{"kind":"text","text":"Registers an "},{"kind":"inline-tag","tag":"@link","text":"npc procedure","target":"https://toebeann.github.io/npc/stable/?page=Interface.Npc"},{"kind":"text","text":" at a given path with middleware. The procedure callback will then be available to other processes via the npc protocol."}],"blockTags":[{"tag":"@remarks","content":[{"kind":"text","text":"* The procedure callback will only receive a single argument when called. It is your responsibility to validate this argument.\nWe recommend "},{"kind":"inline-tag","tag":"@link","text":"Zod","target":"https://zod.dev"},{"kind":"text","text":" for validation.\n* registerNpcApi should be called within the context.once callback."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// subnautica-support/src/index.ts\nimport { join } from \"path\";\nimport { RegisterNpcApi } from \"@toebean/npc-vortex-api\";\nimport { types } from \"vortex-api\";\nimport { enableMod, enableModArgsSchema } from \"./api\";\n\nexport default function main(context: types.IExtensionContext) {\n\n    // make sure to only call registerNpcApi within the context.once callback\n    context.once(async () => {\n        const registerNpcApi: RegisterNpcApi = context.api.ext.registerNpcApi; // assign the interface to the function for TypeScript type safety.\n\n        // register the function `enableMod` with a Zod schema validator middleware function, namespaced by the name of the extension\n        const endpoint = await registerNpcApi?.(join('subnauticaSupport', 'enableMod'), enableMod, enableModArgsSchema.parse);\n        // endpoint = 'vortex\\\\subnauticaSupport\\\\enableMod'\n        // `enableMod` is now available via the npc protocol at this address.\n\n        if (!endpoint) {\n            // if endpoint is undefined, this is likely because the user does not have this extension installed\n            // you can confirm this by inspecting their installed extensions with context.api.getState().session.extensions.installed\n        }\n    });\n}\n```"}]},{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"inline-tag","tag":"@link","text":"Promise","target":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},{"kind":"text","text":" which when resolved, indicates the callback is available to be called via the "},{"kind":"inline-tag","tag":"@link","text":"npc","target":"https://toebeann.github.io/npc/stable/?page=Interface.Npc"},{"kind":"text","text":" protocol at the endpoint\npassed to the "},{"kind":"inline-tag","tag":"@link","text":"then","target":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then"},{"kind":"text","text":" handler."}]}]},"typeParameter":[{"id":539,"name":"T","kind":131072,"kindString":"Type parameter","flags":{}}],"parameters":[{"id":540,"name":"path","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"The path at whic hthe procedure will be available.\nIt is generally recommended to combine the name of your extension with the name of the function."}]},"type":{"type":"intrinsic","name":"string"},"text":{"comment":"<p>The path at whic hthe procedure will be available.\nIt is generally recommended to combine the name of your extension with the name of the function.</p>\n"}},{"id":541,"name":"callback","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"The underlying callback powering the procedure to expose at the path."}]},"type":{"type":"reflection","declaration":{"id":542,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"src/index.ts","line":378,"character":18,"url":"https://github.com/toebeann/npc-vortex-api/blob/a1e2253/src/index.ts#L378"}],"signatures":[{"id":543,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":544,"name":"input","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"reference","id":539,"name":"T"}}],"type":{"type":"intrinsic","name":"unknown"}}]}},"text":{"comment":"<p>The underlying callback powering the procedure to expose at the path.</p>\n"}},{"id":545,"name":"middleware","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"A middleware function which will be applied to the callback's input argument.\nThe return of this function will be passed to the callback as its input. Useful for inserting argument validation or transformation, for example."}]},"type":{"type":"reflection","declaration":{"id":546,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"sources":[{"fileName":"src/index.ts","line":379,"character":20,"url":"https://github.com/toebeann/npc-vortex-api/blob/a1e2253/src/index.ts#L379"}],"signatures":[{"id":547,"name":"__type","kind":4096,"kindString":"Call signature","flags":{},"parameters":[{"id":548,"name":"input","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"intrinsic","name":"unknown"}}],"type":{"type":"reference","id":539,"name":"T"}}]}},"text":{"comment":"<p>A middleware function which will be applied to the callback&#39;s input argument.\nThe return of this function will be passed to the callback as its input. Useful for inserting argument validation or transformation, for example.</p>\n"}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}],"name":"Promise","qualifiedName":"Promise","package":"typescript"},"is":{"declaration":false},"location":{"query":"Interface.RegisterNpcApi","hash":"RegisterNpcApi"},"text":{"comment":"<p>Registers an <a href=\"https://toebeann.github.io/npc/stable/?page=Interface.Npc\">npc procedure</a> at a given path with middleware. The procedure callback will then be available to other processes via the npc protocol.</p>\n<h5>Remarks:</h5><ul>\n<li>The procedure callback will only receive a single argument when called. It is your responsibility to validate this argument.\nWe recommend <a href=\"https://zod.dev\">Zod</a> for validation.</li>\n<li>registerNpcApi should be called within the context.once callback.</li>\n</ul>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// subnautica-support/src/index.ts</span>\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">join</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>path<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">RegisterNpcApi</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@toebean/npc-vortex-api<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">types</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>vortex-api<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">enableMod</span>, <span class=\"pl-smi\">enableModArgsSchema</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>./api<span class=\"pl-pds\">\"</span></span>;\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">main</span>(<span class=\"pl-v\">context</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">types</span>.<span class=\"pl-en\">IExtensionContext</span>) {\n\n    <span class=\"pl-c\">// make sure to only call registerNpcApi within the context.once callback</span>\n    <span class=\"pl-smi\">context</span>.<span class=\"pl-en\">once</span>(<span class=\"pl-k\">async</span> () <span class=\"pl-k\">=></span> {\n        <span class=\"pl-k\">const</span> <span class=\"pl-c1\">registerNpcApi</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">RegisterNpcApi</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">context</span>.<span class=\"pl-smi\">api</span>.<span class=\"pl-smi\">ext</span>.<span class=\"pl-smi\">registerNpcApi</span>; <span class=\"pl-c\">// assign the interface to the function for TypeScript type safety.</span>\n\n        <span class=\"pl-c\">// register the function `enableMod` with a Zod schema validator middleware function, namespaced by the name of the extension</span>\n        <span class=\"pl-k\">const</span> <span class=\"pl-c1\">endpoint</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">registerNpcApi</span>?.(<span class=\"pl-en\">join</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>subnauticaSupport<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>enableMod<span class=\"pl-pds\">'</span></span>), <span class=\"pl-smi\">enableMod</span>, <span class=\"pl-smi\">enableModArgsSchema</span>.<span class=\"pl-smi\">parse</span>);\n        <span class=\"pl-c\">// endpoint = 'vortex\\\\subnauticaSupport\\\\enableMod'</span>\n        <span class=\"pl-c\">// `enableMod` is now available via the npc protocol at this address.</span>\n\n        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span><span class=\"pl-smi\">endpoint</span>) {\n            <span class=\"pl-c\">// if endpoint is undefined, this is likely because the user does not have this extension installed</span>\n            <span class=\"pl-c\">// you can confirm this by inspecting their installed extensions with context.api.getState().session.extensions.installed</span>\n        }\n    });\n}\n</code></pre>\n<h5>Returns:</h5><p>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> which when resolved, indicates the callback is available to be called via the <a href=\"https://toebeann.github.io/npc/stable/?page=Interface.Npc\">npc</a> protocol at the endpoint\npassed to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\">then</a> handler.</p>\n"},"sources":[{"fileName":"src/index.ts","fullFileName":"/home/runner/work/npc-vortex-api/npc-vortex-api/src/index.ts","line":376,"character":4,"url":"https://github.com/toebeann/npc-vortex-api/blob/a1e2253/src/index.ts#L376"}],"parentId":531},{"id":549,"name":"RegisterNpcApi","kind":4096,"kindString":"Call signature","flags":{},"comment":{"summary":[{"kind":"text","text":"Registers all function properties of the passed "},{"kind":"code","text":"`api`"},{"kind":"text","text":" object as "},{"kind":"inline-tag","tag":"@link","text":"npc procedures","target":"https://toebeann.github.io/npc/stable/?page=Interface.Npc"},{"kind":"text","text":", namespaced by the given "},{"kind":"code","text":"`namespace`"},{"kind":"text","text":" string."}],"blockTags":[{"tag":"@remarks","content":[{"kind":"text","text":"* Procedure endpoints will take the form "},{"kind":"code","text":"`vortex\\\\${namespace}\\\\${key}`"},{"kind":"text","text":" where "},{"kind":"code","text":"`namespace`"},{"kind":"text","text":" is the passed "},{"kind":"code","text":"`namespace`"},{"kind":"text","text":" argument,\nand "},{"kind":"code","text":"`key`"},{"kind":"text","text":" is the key of the property in the passed "},{"kind":"code","text":"`api`"},{"kind":"text","text":" object.\n* To automatically assign middleware to property function, simply create an object property "},{"kind":"code","text":"`middleware`"},{"kind":"text","text":" on the "},{"kind":"code","text":"`api`"},{"kind":"text","text":" object,\nand set a property of this object with a matching key, e.g. "},{"kind":"code","text":"`{ foo: (n: number) => isNaN(n), middleware: { foo: z.number().parse } }`"},{"kind":"text","text":"\n* Procedure callbacks will only receive a single argument when called. It is your responsibility to validate this argument.\nWe recommend "},{"kind":"inline-tag","tag":"@link","text":"Zod","target":"https://zod.dev"},{"kind":"text","text":" for validation.\n* registerNpcApi should be called within the context.once callback."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\n// subnautica-support/src/index.ts\nimport { RegisterNpcApi } from \"@toebean/npc-vortex-api\";\nimport { types } from \"vortex-api\";\nimport { z } from \"zod\";\n\nexport default function main(context: types.IExtensionContext) {\n\n    // make sure to only call registerNpcApi within the context.once callback\n    context.once(async () => {\n        const registerNpcApi: RegisterNpcApi = context.api.ext.registerNpcApi; // assign the interface to the function for TypeScript type safety.\n\n        // register the function `enableMod` with a Zod schema validator middleware function, namespaced by the name of the extension\n        const endpoints = await registerNpcApi?.('subnauticaSupport', {\n            getSquareRoot: Math.sqrt,\n            middleware: {\n                getSquareRoot: z.number().parse\n            }\n        });\n        // endpoints = [ 'vortex\\\\subnauticaSupport\\\\getSquareRoot' ]\n\n        if (!endpoints) {\n            // if endpoints is undefined, this is likely because the user does not have this extension installed\n            // you can confirm this by inspecting their installed extensions with context.api.getState().session.extensions.installed\n        }\n    });\n}\n```"}]},{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"inline-tag","tag":"@link","text":"Promise","target":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},{"kind":"text","text":" which when resolved, indicates all function properties of the "},{"kind":"code","text":"`api`"},{"kind":"text","text":" object are available to be called via the\n"},{"kind":"inline-tag","tag":"@link","text":"npc","target":"https://toebeann.github.io/npc/stable/?page=Interface.Npc"},{"kind":"text","text":" protocol at the endpoints passed to the "},{"kind":"inline-tag","tag":"@link","text":"then","target":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then"},{"kind":"text","text":" handler."}]}]},"parameters":[{"id":550,"name":"namespace","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"The namespace to apply to all functions of the passed "},{"kind":"code","text":"`api`"},{"kind":"text","text":" object."}]},"type":{"type":"intrinsic","name":"string"},"text":{"comment":"<p>The namespace to apply to all functions of the passed <code>api</code> object.</p>\n"}},{"id":551,"name":"api","kind":32768,"kindString":"Parameter","flags":{},"comment":{"summary":[{"kind":"text","text":"An object whose function properties should be registered as\n"},{"kind":"inline-tag","tag":"@link","text":"npc procedures","target":"https://toebeann.github.io/npc/stable/?page=Interface.Npc"},{"kind":"text","text":"."}]},"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record","externalUrl":"https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type","qualifiedName":"Record","package":"typescript"},{"type":"reflection","declaration":{"id":552,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":553,"name":"middleware","kind":1024,"kindString":"Property","flags":{},"sources":[{"fileName":"src/index.ts","line":289,"character":8,"url":"https://github.com/toebeann/npc-vortex-api/blob/a1e2253/src/index.ts#L289"}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record","externalUrl":"https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type","qualifiedName":"Record","package":"typescript"}]},"defaultValue":"..."}],"groups":[{"title":"Properties","children":[553]}],"sources":[{"fileName":"node_modules/.pnpm/zod@3.21.0/node_modules/zod/lib/types.d.ts","line":977,"character":123}]}}]},"text":{"comment":"<p>An object whose function properties should be registered as\n<a href=\"https://toebeann.github.io/npc/stable/?page=Interface.Npc\">npc procedures</a>.</p>\n"}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"}]}}],"name":"Promise","qualifiedName":"Promise","package":"typescript"},"is":{"declaration":false},"location":{"query":"Interface.RegisterNpcApi","hash":"RegisterNpcApi"},"text":{"comment":"<p>Registers all function properties of the passed <code>api</code> object as <a href=\"https://toebeann.github.io/npc/stable/?page=Interface.Npc\">npc procedures</a>, namespaced by the given <code>namespace</code> string.</p>\n<h5>Remarks:</h5><ul>\n<li>Procedure endpoints will take the form <code>vortex\\\\${namespace}\\\\${key}</code> where <code>namespace</code> is the passed <code>namespace</code> argument,\nand <code>key</code> is the key of the property in the passed <code>api</code> object.</li>\n<li>To automatically assign middleware to property function, simply create an object property <code>middleware</code> on the <code>api</code> object,\nand set a property of this object with a matching key, e.g. <code>{ foo: (n: number) =&gt; isNaN(n), middleware: { foo: z.number().parse } }</code></li>\n<li>Procedure callbacks will only receive a single argument when called. It is your responsibility to validate this argument.\nWe recommend <a href=\"https://zod.dev\">Zod</a> for validation.</li>\n<li>registerNpcApi should be called within the context.once callback.</li>\n</ul>\n<h5>Example:</h5><pre><code class=\"language-ts\"><span class=\"pl-c\">// subnautica-support/src/index.ts</span>\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">RegisterNpcApi</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@toebean/npc-vortex-api<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">types</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>vortex-api<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">z</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>zod<span class=\"pl-pds\">\"</span></span>;\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">main</span>(<span class=\"pl-v\">context</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">types</span>.<span class=\"pl-en\">IExtensionContext</span>) {\n\n    <span class=\"pl-c\">// make sure to only call registerNpcApi within the context.once callback</span>\n    <span class=\"pl-smi\">context</span>.<span class=\"pl-en\">once</span>(<span class=\"pl-k\">async</span> () <span class=\"pl-k\">=></span> {\n        <span class=\"pl-k\">const</span> <span class=\"pl-c1\">registerNpcApi</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">RegisterNpcApi</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">context</span>.<span class=\"pl-smi\">api</span>.<span class=\"pl-smi\">ext</span>.<span class=\"pl-smi\">registerNpcApi</span>; <span class=\"pl-c\">// assign the interface to the function for TypeScript type safety.</span>\n\n        <span class=\"pl-c\">// register the function `enableMod` with a Zod schema validator middleware function, namespaced by the name of the extension</span>\n        <span class=\"pl-k\">const</span> <span class=\"pl-c1\">endpoints</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">registerNpcApi</span>?.(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>subnauticaSupport<span class=\"pl-pds\">'</span></span>, {\n            getSquareRoot: <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">sqrt</span>,\n            middleware: {\n                getSquareRoot: <span class=\"pl-smi\">z</span>.<span class=\"pl-en\">number</span>().<span class=\"pl-smi\">parse</span>\n            }\n        });\n        <span class=\"pl-c\">// endpoints = [ 'vortex\\\\subnauticaSupport\\\\getSquareRoot' ]</span>\n\n        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span><span class=\"pl-smi\">endpoints</span>) {\n            <span class=\"pl-c\">// if endpoints is undefined, this is likely because the user does not have this extension installed</span>\n            <span class=\"pl-c\">// you can confirm this by inspecting their installed extensions with context.api.getState().session.extensions.installed</span>\n        }\n    });\n}\n</code></pre>\n<h5>Returns:</h5><p>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> which when resolved, indicates all function properties of the <code>api</code> object are available to be called via the\n<a href=\"https://toebeann.github.io/npc/stable/?page=Interface.Npc\">npc</a> protocol at the endpoints passed to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\">then</a> handler.</p>\n"},"sources":[{"fileName":"src/index.ts","fullFileName":"/home/runner/work/npc-vortex-api/npc-vortex-api/src/index.ts","line":427,"character":4,"url":"https://github.com/toebeann/npc-vortex-api/blob/a1e2253/src/index.ts#L427"}],"parentId":531}],"is":{"declaration":true},"location":{"query":"Interface.RegisterNpcApi","hash":""},"text":{},"hierarchy":[{"name":"RegisterNpcApi","isTarget":true,"linkId":"531"}]}
