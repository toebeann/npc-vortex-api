{"id":0,"name":"@toebean/npc-vortex-api - v0.2.1","kind":1,"flags":{},"originalName":"","children":[],"groups":[{"title":"Modules","children":[1,555,1178,1111,3507]}],"is":{"declaration":false},"location":{"query":"index","hash":""},"text":{"readme":"<center>\n\n\n<a href=\"#npc-vortex-api-üõ†Ô∏è\" id=\"npc-vortex-api-üõ†Ô∏è\" style=\"color: inherit; text-decoration: none;\">\n  <h1>npc-vortex-api üõ†Ô∏è</h1>\n</a>\n<p>A utility package for npc for Vortex.</p>\n<p><a href=\"https://npmjs.org/package/@toebean/npc-vortex-api\" title=\"View npc-vortex-api on npm\"><img src=\"https://img.shields.io/npm/v/@toebean/npc-vortex-api.svg?logo=npm&label&labelColor=222&style=flat-square\" alt=\"npm package version\"></a> <a href=\"https://npmjs.org/package/@toebean/npc-vortex-api\" title=\"View npc-vortex-api on npm\"><img src=\"https://img.shields.io/npm/dw/@toebean/npc-vortex-api.svg?logo=npm&labelColor=222&style=flat-square\" alt=\"npm package downloads\"></a> <a href=\"https://toebeann.github.io/npc-vortex-api/\" title=\"Read the documentation on Github Pages\"><img src=\"https://img.shields.io/badge/docs-informational.svg?logo=typescript&labelColor=222&style=flat-square\" alt=\"typedocs\"></a> <a href=\"https://github.com/toebeann/npc-vortex-api/blob/main/LICENSE\" title=\"View the license on GitHub\"><img src=\"https://img.shields.io/github/license/toebeann/npc-vortex-api.svg?logo=open-source-initiative&logoColor=3DA639&color=informational&labelColor=222&style=flat-square\" alt=\"license\"></a></p>\n<p><a href=\"https://github.com/toebeann/npc-vortex-api/actions/workflows/pnpm-test.yml\" title=\"View pnpm test on GitHub Actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/toebeann/npc-vortex-api/pnpm-test.yml?logo=github&logoColor=aaa&label=npm%20test&labelColor=222&style=flat-square\" alt=\"pnpm test\"></a> <a href=\"https://github.com/toebeann/npc-vortex-api/actions/workflows/publish-package.yml\" title=\"View publish package on GitHub Actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/toebeann/npc-vortex-api/publish-package.yml?logo=github&logoColor=aaa&label=publish%20package&labelColor=222&style=flat-square\" alt=\"publish package\"></a> <a href=\"https://github.com/toebeann/npc-vortex-api/actions/workflows/publish-docs.yml\" title=\"View publish docs on GitHub Actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/toebeann/npc-vortex-api/publish-docs.yml?branch=main&logo=github&logoColor=aaa&label=publish%20docs&labelColor=222&style=flat-square\" alt=\"publish docs\"></a></p>\n<p><a href=\"https://github.com/toebeann/npc-vortex-api\" title=\"View npc-vortex-api on GitHub\"><img src=\"https://img.shields.io/badge/source-informational.svg?logo=github&labelColor=222&style=flat-square\" alt=\"github\"></a> <a href=\"https://twitter.com/toebean__\" title=\"Follow @toebean__ on Twitter\"><img src=\"https://img.shields.io/badge/follow-blue.svg?logo=twitter&label&labelColor=222&style=flat-square\" alt=\"twitter\"></a> <a href=\"https://github.com/sponsors/toebeann\" title=\"Sponsor npc-vortex-api on GitHub\"><img src=\"https://img.shields.io/badge/sponsor-e5b.svg?logo=github%20sponsors&labelColor=222&style=flat-square\" alt=\"GitHub Sponsors donation button\"></a> <a href=\"https://paypal.me/tobeyblaber\" title=\"Donate to npc-vortex-api with PayPal\"><img src=\"https://img.shields.io/badge/donate-e5b.svg?logo=paypal&labelColor=222&style=flat-square\" alt=\"PayPal donation button\"></a></p>\n</center>\n\n\n<a href=\"#description\" id=\"description\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Description</h2>\n</a>\n<p>This package exposes a number of utility functions for calling the built-in procedures of npc for Vortex, as well as type information for working with the extension in TypeScript.</p>\n\n<a href=\"#table-of-contents\" id=\"table-of-contents\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Table of contents</h2>\n</a>\n<ul>\n<li><a href=\"#npc-vortex-api-%EF%B8%8F\">npc-vortex-api üõ†Ô∏è</a><ul>\n<li><a href=\"#description\">Description</a></li>\n<li><a href=\"#table-of-contents\">Table of contents</a></li>\n<li><a href=\"#installation\">Installation</a><ul>\n<li><a href=\"#pnpm\">pnpm</a></li>\n<li><a href=\"#yarn\">yarn</a></li>\n<li><a href=\"#npm\">npm</a></li>\n</ul>\n</li>\n<li><a href=\"#usage\">Usage</a><ul>\n<li><a href=\"#registering-npc-procedures-in-a-vortex-extension\">Registering npc procedures in a Vortex extension</a></li>\n<li><a href=\"#calling-external-npc-procedures-from-a-vortex-extension\">Calling external npc procedures from a Vortex extension</a></li>\n<li><a href=\"#registering-npc-procedures-in-a-separate-nodejs-application\">Registering npc procedures in a separate Node.js application</a></li>\n<li><a href=\"#calling-vortex-npc-procedures-from-a-separate-nodejs-application\">Calling Vortex npc procedures from a separate Node.js application</a><ul>\n<li><a href=\"#registered-by-extensions\">Registered by extensions</a></li>\n<li><a href=\"#npc-for-vortex-built-ins\">npc for Vortex built-ins</a></li>\n</ul>\n</li>\n<li><a href=\"#calling-npc-for-vortex-built-ins-from-a-vortex-extension\">Calling npc for Vortex built-ins from a Vortex extension</a></li>\n</ul>\n</li>\n<li><a href=\"#license\">License</a></li>\n</ul>\n</li>\n</ul>\n\n<a href=\"#installation\" id=\"installation\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Installation</h2>\n</a>\n\n<a href=\"#pnpm\" id=\"pnpm\" style=\"color: inherit; text-decoration: none;\">\n  <h3><a href=\"https://pnpm.io\" title=\"pnpm is a fast, disk space efficient package manager\">pnpm</a></h3>\n</a>\n<pre><code class=\"language-shell\">pnpm add @toebean/npc-vortex-api\n</code></pre>\n\n<a href=\"#yarn\" id=\"yarn\" style=\"color: inherit; text-decoration: none;\">\n  <h3><a href=\"https://yarnpkg.com\" title=\"Yarn is a package manager that doubles down as project manager\">yarn</a></h3>\n</a>\n<pre><code class=\"language-shell\">yarn add @toebean/npc-vortex-api\n</code></pre>\n\n<a href=\"#npm\" id=\"npm\" style=\"color: inherit; text-decoration: none;\">\n  <h3><a href=\"https://npmjs.com\" title=\"npm is the package manager for Node.js\">npm</a></h3>\n</a>\n<pre><code class=\"language-shell\">npm i @toebean/npc-vortex-api\n</code></pre>\n\n<a href=\"#usage\" id=\"usage\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Usage</h2>\n</a>\n\n<a href=\"#registering-npc-procedures-in-a-vortex-extension\" id=\"registering-npc-procedures-in-a-vortex-extension\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Registering npc procedures in a Vortex extension</h3>\n</a>\n<pre><code class=\"language-ts\"><span class=\"pl-k\">import</span> { <span class=\"pl-smi\">join</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>path<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">RegisterNpcApi</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@toebean/npc-vortex-api<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">types</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>vortex-api<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">z</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>zod<span class=\"pl-pds\">\"</span></span>;\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-en\">main</span>(<span class=\"pl-smi\">context</span>: <span class=\"pl-smi\">types</span>.<span class=\"pl-smi\">IExtensionContext</span>) {\n  <span class=\"pl-c\">// always call registerNpcApi from within context.once</span>\n  context.once(<span class=\"pl-en\">async</span> () <span class=\"pl-k\">=></span> {\n    <span class=\"pl-c\">// apply type information to the registerNpcApi function</span>\n    <span class=\"pl-en\">const</span> <span class=\"pl-v\">registerNpcApi</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">RegisterNpcApi</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">context</span>.<span class=\"pl-smi\">api</span>.<span class=\"pl-smi\">ext</span>.<span class=\"pl-smi\">registerNpcApi</span>;\n\n    <span class=\"pl-c\">// this is the function which we will expose as an npc procedure</span>\n    <span class=\"pl-en\">const</span> <span class=\"pl-v\">callback</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">sqrt</span>;\n\n    <span class=\"pl-c\">// the path at which we will expose the procedure</span>\n    <span class=\"pl-c\">// it is recommended to always namespace your procedures</span>\n    <span class=\"pl-c\">// by the name of your extension</span>\n    <span class=\"pl-en\">const</span> <span class=\"pl-v\">path</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">join</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>myExtensionName<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>getSquareRoot<span class=\"pl-pds\">\"</span></span>);\n\n    <span class=\"pl-c\">// it is recommended to validate the input arguments being</span>\n    <span class=\"pl-c\">// sent to your procedure with middleware - in this case</span>\n    <span class=\"pl-c\">// we are using Zod to validate the input argument is a number</span>\n    <span class=\"pl-en\">const</span> <span class=\"pl-v\">middleware</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">z</span>.<span class=\"pl-en\">number</span>().<span class=\"pl-smi\">parse</span>;\n\n    <span class=\"pl-c\">// now register the npc procedure</span>\n    <span class=\"pl-en\">const</span> <span class=\"pl-v\">endpoint</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">registerNpcApi</span>?.(<span class=\"pl-smi\">path</span>, <span class=\"pl-smi\">callback</span>, <span class=\"pl-smi\">middleware</span>);\n    <span class=\"pl-c\">// endpoint = \"vortex\\\\myExtensionName\\\\getSquareRoot\"</span>\n\n    <span class=\"pl-c\">// the npc procedure will now be callable via npc</span>\n    <span class=\"pl-c\">// at the endpoint: vortex\\myExtensionName\\getSquareRoot</span>\n\n    <span class=\"pl-en\">if</span> (!<span class=\"pl-v\">endpoint</span>) {\n        <span class=\"pl-c\">// if endpoint is undefined, this is likely because the user</span>\n        <span class=\"pl-c\">// does not have npc for Vortex installed</span>\n    }\n  });\n}\n</code></pre>\n<ul>\n<li>See <a href=\"https://zod.dev\">https://zod.dev</a> for more information on Zod.</li>\n</ul>\n\n<a href=\"#calling-external-npc-procedures-from-a-vortex-extension\" id=\"calling-external-npc-procedures-from-a-vortex-extension\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Calling external npc procedures from a Vortex extension</h3>\n</a>\n<pre><code class=\"language-ts\"><span class=\"pl-k\">import</span> { <span class=\"pl-smi\">join</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>path<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">call</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@toebean/npc<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">types</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>vortex-api<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">z</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>zod<span class=\"pl-pds\">\"</span></span>;\n\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">getSquareRoot</span>(<span class=\"pl-v\">n</span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">number</span>) {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">result</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">call</span>(<span class=\"pl-en\">join</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>myNodeApp<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>getSquareRoot<span class=\"pl-pds\">\"</span></span>), <span class=\"pl-smi\">n</span>);\n  <span class=\"pl-c\">// we should validate the result matches our expectations,</span>\n  <span class=\"pl-c\">// for this purpose we recommend using Zod</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">z</span>.<span class=\"pl-en\">number</span>().<span class=\"pl-c1\">parse</span>(<span class=\"pl-smi\">result</span>);\n}\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">main</span>(<span class=\"pl-v\">context</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">types</span>.<span class=\"pl-en\">IExtensionContext</span>) {\n  <span class=\"pl-k\">try</span> {\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">root</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">getSquareRoot</span>(<span class=\"pl-c1\">64</span>);\n    <span class=\"pl-c\">// if the endpoint was available, the input value 64 was</span>\n    <span class=\"pl-c\">// acceptable by the procedure at the endpoint,</span>\n    <span class=\"pl-c\">// and the output value meets our own validation,</span>\n    <span class=\"pl-c\">// then root will now be the result of the externally defined</span>\n    <span class=\"pl-c\">// function `myNodeApp\\getSquareRoot`: 8</span>\n  } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">error</span>) {\n    <span class=\"pl-c\">// if the npc endpoint `myNodeApp\\getSquareRoot` is not available,</span>\n    <span class=\"pl-c\">// or if our input arguments/output did not pass validation,</span>\n    <span class=\"pl-c\">// an error will be thrown, so we should handle that error here</span>\n  }\n}\n</code></pre>\n<ul>\n<li>See <a href=\"https://toebeann.github.io/npc\">npc</a> for more information about the <a href=\"https://toebeann.github.io/npc/stable/?page=Function.call\">call</a> function.</li>\n<li>See <a href=\"https://zod.dev\">https://zod.dev</a> for more information on Zod.</li>\n</ul>\n\n<a href=\"#registering-npc-procedures-in-a-separate-nodejs-application\" id=\"registering-npc-procedures-in-a-separate-nodejs-application\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Registering npc procedures in a separate Node.js application</h3>\n</a>\n<pre><code class=\"language-ts\"><span class=\"pl-k\">import</span> { <span class=\"pl-smi\">join</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>path<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">create</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@toebean/npc<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">z</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>zod<span class=\"pl-pds\">\"</span></span>;\n\n<span class=\"pl-c\">// create an npc procedure which calculates the square root of a</span>\n<span class=\"pl-c\">// numeric input value, with middleware which will validate the</span>\n<span class=\"pl-c\">// input value is a number using Zod</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">npc</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">create</span>(<span class=\"pl-c1\">Math</span>.<span class=\"pl-c1\">sqrt</span>, <span class=\"pl-smi\">z</span>.<span class=\"pl-en\">number</span>().<span class=\"pl-smi\">parse</span>);\n<span class=\"pl-k\">await</span> <span class=\"pl-smi\">npc</span>.<span class=\"pl-en\">listen</span>(<span class=\"pl-en\">join</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>myNodeApp<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>getSquareRoot<span class=\"pl-pds\">\"</span></span>));\n\n<span class=\"pl-c\">// the npc procedure is now available to be called at the endpoint:</span>\n<span class=\"pl-c\">// myNodeApp\\getSquareRoot</span>\n</code></pre>\n<ul>\n<li>See <a href=\"https://toebeann.github.io/npc\">npc</a> for more information about the <a href=\"https://toebeann.github.io/npc/stable/?page=Function.create\">create</a> function.</li>\n<li>See <a href=\"https://zod.dev\">https://zod.dev</a> for more information on Zod.</li>\n</ul>\n\n<a href=\"#calling-vortex-npc-procedures-from-a-separate-nodejs-application\" id=\"calling-vortex-npc-procedures-from-a-separate-nodejs-application\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Calling Vortex npc procedures from a separate Node.js application</h3>\n</a>\n\n<a href=\"#registered-by-extensions\" id=\"registered-by-extensions\" style=\"color: inherit; text-decoration: none;\">\n  <h4>Registered by extensions</h4>\n</a>\n<pre><code class=\"language-ts\"><span class=\"pl-k\">import</span> { <span class=\"pl-smi\">join</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>path<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">call</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@toebean/npc<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">z</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>zod<span class=\"pl-pds\">\"</span></span>;\n\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">getSquareRoot</span>(<span class=\"pl-v\">n</span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">number</span>) {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">result</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">call</span>({\n    endpoint: <span class=\"pl-en\">join</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>vortex<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>myExtensionName<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>getSquareRoot<span class=\"pl-pds\">\"</span></span>),\n    input: <span class=\"pl-smi\">n</span>,\n  });\n  <span class=\"pl-c\">// we should validate the result matches our expectations,</span>\n  <span class=\"pl-c\">// for this purpose we recommend using Zod</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">z</span>.<span class=\"pl-en\">number</span>().<span class=\"pl-c1\">parse</span>(<span class=\"pl-smi\">result</span>);\n}\n\n(<span class=\"pl-k\">async</span> () <span class=\"pl-k\">=></span> {\n  <span class=\"pl-k\">try</span> {\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">root</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">getSquareRoot</span>(<span class=\"pl-c1\">64</span>);\n    <span class=\"pl-c\">// if the endpoint was available, the input value 64 was</span>\n    <span class=\"pl-c\">// acceptable by the procedure at the endpoint,</span>\n    <span class=\"pl-c\">// and the output value meets our own validation,</span>\n    <span class=\"pl-c\">// then root will now be the result of the externally defined</span>\n    <span class=\"pl-c\">// function `myNodeApp\\getSquareRoot`: 8</span>\n  } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">error</span>) {\n    <span class=\"pl-c\">// if the npc endpoint `myNodeApp\\getSquareRoot` is not available,</span>\n    <span class=\"pl-c\">// or if our input arguments/output did not pass validation,</span>\n    <span class=\"pl-c\">// an error will be thrown, so we should handle that error here</span>\n  }\n})();\n</code></pre>\n<ul>\n<li>See <a href=\"https://toebeann.github.io/npc\">npc</a> for more information about the <a href=\"https://toebeann.github.io/npc/stable/?page=Function.call\">call</a> function.</li>\n<li>See <a href=\"https://zod.dev\">https://zod.dev</a> for more information on Zod.</li>\n</ul>\n\n<a href=\"#npc-for-vortex-built-ins\" id=\"npc-for-vortex-built-ins\" style=\"color: inherit; text-decoration: none;\">\n  <h4>npc for Vortex built-ins</h4>\n</a>\n<p>npc-vortex-api exposes helper methods to call the built-in npc procedures of npc for Vortex:</p>\n<pre><code class=\"language-ts\"><span class=\"pl-k\">import</span> { <span class=\"pl-smi\">inspect</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>util<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">nexus</span>, <span class=\"pl-smi\">vortex</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@toebean/npc-vortex-api<span class=\"pl-pds\">\"</span></span>;\n\n(<span class=\"pl-k\">async</span> () <span class=\"pl-k\">=></span> {\n  <span class=\"pl-k\">try</span> {\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">currentGame</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">vortex</span>.<span class=\"pl-en\">getCurrentGame</span>();\n\n    <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">currentGame</span>.<span class=\"pl-c1\">id</span> <span class=\"pl-k\">!==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>__placeholder<span class=\"pl-pds\">\"</span></span>) {\n      <span class=\"pl-k\">const</span> <span class=\"pl-c1\">latest</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">nexus</span>.<span class=\"pl-en\">getLatestUpdated</span>({\n        input: { gameId: <span class=\"pl-smi\">currentGame</span>.<span class=\"pl-c1\">id</span> },\n      });\n      <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-en\">inspect</span>(<span class=\"pl-smi\">latest</span>, <span class=\"pl-c1\">false</span>, <span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">true</span>));\n      <span class=\"pl-c\">// prints a list of the latest updated mods on Nexus Mods</span>\n      <span class=\"pl-c\">// for the game which the user is currently managing in Vortex</span>\n    }\n  } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">error</span>) {\n    <span class=\"pl-c\">// handle any errors</span>\n  }\n})();\n</code></pre>\n<p>All of the helper methods use <a href=\"https://zod.dev\">Zod</a> to validate the output of each function, so you do not need to do this yourself.</p>\n<p>Complete listing of all helper methods:</p>\n<ul>\n<li><a href=\"https://toebeann.github.io/npc-vortex-api/stable/?page=Module.nexus\">Nexus</a></li>\n<li><a href=\"https://toebeann.github.io/npc-vortex-api/stable/?page=Module.vortex\">Vortex</a></li>\n</ul>\n\n<a href=\"#calling-npc-for-vortex-built-ins-from-a-vortex-extension\" id=\"calling-npc-for-vortex-built-ins-from-a-vortex-extension\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Calling npc for Vortex built-ins from a Vortex extension</h3>\n</a>\n<p>It is not necessary to use npc to call the npc for Vortex built-ins from a Vortex extension, as they are exposed via the Vortex extension API in the same manner as registerNpcApi:</p>\n<pre><code class=\"language-ts\"><span class=\"pl-k\">import</span> { <span class=\"pl-smi\">NexusApi</span>, <span class=\"pl-smi\">VortexApi</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@toebean/npc-vortex-api<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">types</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>vortex-api<span class=\"pl-pds\">\"</span></span>;\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-en\">main</span>(<span class=\"pl-smi\">context</span>: <span class=\"pl-smi\">types</span>.<span class=\"pl-smi\">IExtensionContext</span>) {\n  <span class=\"pl-c\">// always call Vortex extension API functions from within context.once</span>\n  context.once(<span class=\"pl-en\">async</span> () <span class=\"pl-k\">=></span> {\n    <span class=\"pl-en\">const</span> <span class=\"pl-v\">nexusApi</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">NexusApi</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">context</span>.<span class=\"pl-smi\">api</span>.<span class=\"pl-smi\">ext</span>.<span class=\"pl-en\">createNexusApi</span>?.();\n    <span class=\"pl-en\">const</span> <span class=\"pl-v\">vortexApi</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">VortexApi</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">context</span>.<span class=\"pl-smi\">api</span>.<span class=\"pl-smi\">ext</span>.<span class=\"pl-en\">createVortexApi</span>?.();\n\n    <span class=\"pl-c\">// if vortexApi or nexusApi are undefined,</span>\n    <span class=\"pl-c\">// the npc for Vortex extension is likely not installed</span>\n    <span class=\"pl-en\">if</span> (<span class=\"pl-v\">vortexApi</span> &#x26;&#x26; <span class=\"pl-v\">nexusApi</span>) {\n        <span class=\"pl-k\">try</span> {\n          <span class=\"pl-k\">const</span> <span class=\"pl-c1\">currentGame</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">vortexApi</span>.<span class=\"pl-en\">getCurrentGame</span>();\n\n          <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">currentGame</span>.<span class=\"pl-c1\">id</span> <span class=\"pl-k\">!==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__placeholder<span class=\"pl-pds\">'</span></span>) {\n              <span class=\"pl-k\">const</span> <span class=\"pl-c1\">latest</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">nexus</span>.<span class=\"pl-en\">getLatestUpdated</span>({\n                  input: { gameId: <span class=\"pl-smi\">currentGame</span>.<span class=\"pl-c1\">id</span> },\n              });\n              <span class=\"pl-c\">// latest now contains a list of the latest updated</span>\n              <span class=\"pl-c\">// mods from Nexus Mods for the game which the user</span>\n              <span class=\"pl-c\">// is currently managing in Vortex</span>\n          }\n        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">error</span>) {\n          <span class=\"pl-c\">// handle any errors here</span>\n        }\n      }\n  });\n}\n</code></pre>\n<p>All of the built-ins use <a href=\"https://zod.dev\">Zod</a> to validate the output of each function, so you do not need to do this yourself.</p>\n<p>Complete listing of npc for Vortex built-ins:</p>\n<ul>\n<li><a href=\"https://toebeann.github.io/npc-vortex-api/stable/?page=index.Interface.NexusApi\">Nexus</a></li>\n<li><a href=\"https://toebeann.github.io/npc-vortex-api/stable/?page=index.Interface.VortexApi\">Vortex</a></li>\n</ul>\n\n<a href=\"#license\" id=\"license\" style=\"color: inherit; text-decoration: none;\">\n  <h2>License</h2>\n</a>\n<p>npc-vortex-api is licensed under <a href=\"https://github.com/toebeann/npc-vortex-api/blob/main/LICENSE\">MIT</a> ¬© 2023 Tobey Blaber.</p>\n"}}
