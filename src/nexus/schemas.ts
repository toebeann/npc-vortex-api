// Generated by ts-to-zod
import { z } from 'zod';
import { ITag, ICollection } from './types';

const numericStringSchema = z.string().refine((s) => !isNaN(+s));
const numericStringToIntSchema = numericStringSchema.transform((s) =>
    Number.parseInt(s)
);
const numberAndTransformIntStringSchema = z
    .number()
    .or(numericStringToIntSchema);
const numberToStringSchema = z.number().transform((n) => n.toString());
const stringAndTransformNumbersSchema =
    numericStringSchema.or(numberToStringSchema);

export const gameIdArgsSchema = z.object({ gameId: z.string() });
export const modIdArgsSchema = gameIdArgsSchema.merge(
    z.object({ modId: numberAndTransformIntStringSchema })
);
export const fileIdArgsSchema = modIdArgsSchema.merge(
    z.object({ fileId: numberAndTransformIntStringSchema })
);
export const endorseModArgsSchema = modIdArgsSchema.merge(
    z.object({
        modVersion: z.string(),
        endorseStatus: z.literal('endorse').or(z.literal('abstain')),
    })
);
export const getCollectionArgsSchema = z.object({ slug: z.string() });
export const getCollectionRevisionArgsSchema = z.object({
    collectionSlug: z.string(),
    revisionNumber: z.number(),
});
export const getDownloadUrlArgsSchema = fileIdArgsSchema.merge(
    z.object({ key: z.string().optional(), expires: z.number().optional() })
);
export const getFileByMd5ArgsSchema = gameIdArgsSchema.merge(
    z.object({ hash: z.string() })
);
export const getMyCollectionsArgsSchema = gameIdArgsSchema.merge(
    z.object({
        count: numberAndTransformIntStringSchema.optional(),
        offset: numberAndTransformIntStringSchema.optional(),
    })
);
export const getRecentlyUpdatedModsArgsSchema = gameIdArgsSchema.merge(
    z.object({
        period: z.union([z.literal('1d'), z.literal('1w'), z.literal('1m')]),
    })
);
export const rateCollectionRevisionArgsSchema = z.object({
    revisionId: numberAndTransformIntStringSchema,
    rating: z.number(),
});
export const resolveCollectionUrlArgsSchema = z.object({ apiLink: z.string() });
export const trackModArgsSchema = gameIdArgsSchema.merge(
    z.object({ modId: stringAndTransformNumbersSchema })
);

export const endorsedStatusSchema = z.union([
    z.literal('Undecided'),
    z.literal('Abstained'),
    z.literal('Endorsed'),
]);

export const iEndorseResponseSchema = z.object({
    message: z.string(),
    status: endorsedStatusSchema,
});

export const iChangelogsSchema = z.record(z.array(z.string()));

export const iColourSchemeSchema = z.object({
    id: z.number(),
    name: z.string(),
    primary_colour: z.string(),
    secondary_colour: z.string(),
    darker_colour: z.string(),
});

export const iDownloadURLSchema = z.object({
    URI: z.string(),
    name: z.string(),
    short_name: z.string(),
});

export const iEndorsementSchema = z.object({
    mod_id: z.number(),
    domain_name: z.string(),
    date: z.union([z.number(), z.string()]),
    version: z.string().nullable(),
    status: endorsedStatusSchema,
});

export const iUserSchema = z.object({
    member_id: z.number(),
    member_group_id: z.number(),
    name: z.string(),
});

export const modStatusSchema = z.union([
    z.literal('under_moderation'),
    z.literal('published'),
    z.literal('not_published'),
    z.literal('publish_with_game'),
    z.literal('removed'),
    z.literal('wastebinned'),
    z.literal('hidden'),
]);

export const iModInfoSchema = z.object({
    mod_id: z.number(),
    game_id: z.number(),
    domain_name: z.string(),
    category_id: z.number(),
    contains_adult_content: z.boolean(),
    name: z.string().optional(),
    summary: z.string().optional(),
    description: z.string().optional(),
    version: z.string(),
    author: z.string(),
    user: iUserSchema,
    uploaded_by: z.string(),
    uploaded_users_profile_url: z.string(),
    status: modStatusSchema,
    available: z.boolean(),
    picture_url: z.string().optional(),
    created_timestamp: z.number(),
    created_time: z.string(),
    updated_timestamp: z.number(),
    updated_time: z.string(),
    allow_rating: z.boolean(),
    endorsement_count: z.number(),
    mod_downloads: z.number().optional(),
    mod_unique_downloads: z.number().optional(),
    endorsement: z
        .object({
            endorse_status: endorsedStatusSchema,
            timestamp: z.number().nullable(),
            version: z.number().nullable(),
        })
        .optional()
        .nullable(),
});

export const iModInfoExSchema = iModInfoSchema.extend({
    mod_id: z.number(),
    game_id: z.number(),
});

export const iFileInfoSchema = z.object({
    file_id: z.number(),
    category_id: z.number(),
    category_name: z.string(),
    changelog_html: z.string().nullable(),
    content_preview_link: z.string(),
    name: z.string(),
    description: z.string(),
    version: z.string(),
    size: z.number(),
    size_kb: z.number(),
    file_name: z.string(),
    uploaded_timestamp: z.number(),
    uploaded_time: z.string(),
    mod_version: z.string(),
    external_virus_scan_url: z.string(),
    is_primary: z.boolean(),
});

export const iMD5ResultSchema = z.object({
    mod: iModInfoExSchema,
    file_details: iFileInfoSchema,
});

export const iGameListEntrySchema = z.object({
    id: z.number(),
    domain_name: z.string(),
    name: z.string(),
    forum_url: z.string(),
    nexusmods_url: z.string(),
    genre: z.string(),
    mods: z.number(),
    file_count: z.number(),
    downloads: z.number(),
    approved_date: z.number(),
});

export const iCategorySchema = z.object({
    category_id: z.number(),
    name: z.string(),
    parent_category: z.union([z.number(), z.literal(false)]),
});

export const iGameInfoSchema = iGameListEntrySchema.extend({
    categories: z.array(iCategorySchema),
});

export const iFileUpdateSchema = z.object({
    new_file_id: z.number(),
    new_file_name: z.string(),
    old_file_id: z.number(),
    old_file_name: z.string(),
    uploaded_time: z.string(),
    uploaded_timestamp: z.number(),
});

export const iModFilesSchema = z.object({
    file_updates: z.array(iFileUpdateSchema),
    files: z.array(iFileInfoSchema),
});

export const updatePeriodSchema = z.union([
    z.literal('1d'),
    z.literal('1w'),
    z.literal('1m'),
]);

export const iUpdateEntrySchema = z.object({
    mod_id: z.number(),
    latest_file_update: z.number(),
    latest_mod_activity: z.number(),
});

export const iTrackedModSchema = z.object({
    mod_id: z.number(),
    domain_name: z.string(),
});

export const iValidateKeyResponseSchema = z.object({
    user_id: z.number(),
    key: z.string(),
    name: z.string(),
    is_premium: z.boolean(),
    is_supporter: z.boolean(),
    email: z.string(),
    profile_url: z.string(),
});

export const iTrackResponseSchema = z.object({
    message: z.string(),
});

export const iDateTimeSchema = z.string();

export const iTimestampedSchema = z.object({
    updatedAt: iDateTimeSchema,
    createdAt: iDateTimeSchema,
});

export const iGameSchema = z.object({
    id: z.number().optional(),
    domainName: z.string(),
    name: z.string().optional(),
});

export const iCategorySchema2 = z.object({
    approved: z.boolean(),
    approvedBy: z.number().optional(),
    categoryGames: z.array(iGameSchema),
    createdAt: iDateTimeSchema,
    description: z.string(),
    discardedAt: iDateTimeSchema.optional(),
    id: z.number(),
    name: z.string(),
    parentId: z.number(),
    suggestedBy: z.number(),
    updatedAt: iDateTimeSchema,
});

export const iGraphUserSchema = z.object({
    avatar: z.string(),
    memberId: z.number(),
    name: z.string(),
});

export const iCollectionBugReportSchema = iTimestampedSchema.extend({
    collectionBugStatusId: z.number(),
    collectionRevisionId: z.number(),
    description: z.string(),
    id: z.number(),
    title: z.string(),
    user: iGraphUserSchema,
    userId: z.number(),
});

export const iCollectionChangelogSchema = z.object({
    collectionRevisionId: z.number(),
    createdAt: iDateTimeSchema,
    description: z.string(),
    id: z.number(),
    revisionNumber: z.number(),
    updatedAt: iDateTimeSchema,
});

export const iCollectionSchemaSchema = iTimestampedSchema.extend({
    id: z.number(),
    version: z.string(),
});

export const iExternalResourceSchema = z.object({
    collectionRevisionId: z.number(),
    fileExpression: z.string(),
    id: z.number(),
    instructions: z.string(),
    name: z.string(),
    optional: z.boolean(),
    resourceType: z.string(),
    resourceUrl: z.string(),
    version: z.string(),
});

export const iGameVersionSchema = z.object({
    id: z.number(),
    reference: z.string(),
});

export const ratingOptionsSchema = z.union([
    z.literal('positive'),
    z.literal('negative'),
    z.literal('abstained'),
]);

export const iRevisionMetadataSchema = z.object({
    ratingValue: ratingOptionsSchema,
});

export const iModCategorySchema = z.object({
    category_id: z.number(),
    name: z.string(),
    parent_category: z.union([z.number(), z.literal(false)]),
});

export const iTrackingStateSchema = z.object({
    test: z.number().optional(),
});

export const iModSchema = z.object({
    author: z.string().optional(),
    category: z.string(),
    description: z.string(),
    game: iGameSchema,
    gameId: z.number(),
    id: z.number(),
    ipAddress: z.string(),
    modCategory: iModCategorySchema,
    modId: z.number(),
    name: z.string(),
    pictureUrl: z.string().optional(),
    status: z.string(),
    summary: z.string(),
    trackingData: iTrackingStateSchema,
    uid: z.string(),
    uploader: iGraphUserSchema,
    version: z.string(),
});

export const iModFileSchema = z.object({
    categoryId: z.number(),
    count: z.number(),
    date: z.number(),
    description: z.string(),
    fileId: z.number(),
    game: iGameSchema,
    manager: z.number(),
    mod: iModSchema,
    modId: z.number(),
    name: z.string(),
    owner: iGraphUserSchema,
    primary: z.number(),
    reportLink: z.string(),
    requirementsAlert: z.number(),
    scanned: z.number(),
    size: z.number(),
    sizeInBytes: z.string().optional(),
    uCount: z.number(),
    uid: z.string(),
    uri: z.string(),
    version: z.string(),
});

export const iCollectionRevisionModSchema = z.object({
    collectionRevisionId: z.number(),
    file: iModFileSchema.optional(),
    fileId: z.number(),
    gameId: z.number(),
    id: z.number(),
    optional: z.boolean(),
    updatePolicy: z.string(),
    version: z.string(),
});

export const iRatingSchema = z.object({
    average: z.number(),
    positive: z.number(),
    total: z.number(),
});

export const iForumPostSchema = z.object({
    authorId: z.number(),
    authorName: z.string(),
    id: z.number(),
    post: z.string(),
    postDate: iDateTimeSchema,
    user: iGraphUserSchema,
});

export const iForumTopicSchema = z.object({
    approved: z.boolean().optional(),
    description: z.string().optional(),
    forumId: z.number().optional(),
    id: z.number().optional(),
    pinned: z.boolean().optional(),
    posts: z.array(iForumPostSchema).optional(),
    postsCount: z.number(),
    state: z.string().optional(),
    title: z.string().optional(),
    views: z.number().optional(),
    visible: z.string().optional(),
});

export const iCollectionMetadataSchema = z.object({
    endorsementValue: z.number(),
});

export const iTagSchema: z.ZodSchema<ITag> = z.lazy(() =>
    iTimestampedSchema.extend({
        adult: z.boolean(),
        category: z
            .object({
                discardedAt: iDateTimeSchema.optional(),
                id: z.string(),
                name: z.string(),
                tags: z.array(iTagSchema),
                updatedAt: iDateTimeSchema,
                createdAt: iDateTimeSchema,
            })
            .optional(),
        discardedAt: iDateTimeSchema,
        global: z.boolean(),
        id: z.string(),
        name: z.string(),
    })
);

export const iCollectionSchema: z.ZodSchema<ICollection> = z.lazy(() =>
    iTimestampedSchema.extend({
        category: iCategorySchema2.optional(),
        contentPreviewLink: z.string().optional(),
        currentRevision: z
            .object({
                adultContent: z.string(),
                bugReports: z.array(iCollectionBugReportSchema),
                collection: iCollectionSchema,
                collectionChangelog: iCollectionChangelogSchema,
                collectionId: z.number(),
                collectionSchema: iCollectionSchemaSchema,
                collectionSchemaId: z.number(),
                contentPreviewLink: z.string(),
                downloadLink: z.string(),
                externalResources: z.array(iExternalResourceSchema),
                fileSize: z.number(),
                gameVersions: z.array(iGameVersionSchema),
                id: z.number(),
                installationInfo: z.string().optional(),
                latest: z.boolean(),
                metadata: iRevisionMetadataSchema,
                modFiles: z.array(iCollectionRevisionModSchema),
                rating: iRatingSchema,
                revisionNumber: z.number(),
                revisionStatus: z.string(),
                status: z.string(),
                updatedAt: iDateTimeSchema,
                createdAt: iDateTimeSchema,
            })
            .optional(),
        downloadLink: z.string().optional(),
        enableDonations: z.boolean().optional(),
        endorsements: z.number(),
        forumTopic: iForumTopicSchema.optional(),
        game: iGameSchema,
        gameId: z.number().optional(),
        headerImage: z
            .object({
                altText: z.string(),
                collection: iCollectionSchema,
                discardedAt: iDateTimeSchema.optional(),
                id: z.string(),
                position: z.number(),
                revision: z
                    .object({
                        adultContent: z.string(),
                        bugReports: z.array(iCollectionBugReportSchema),
                        collection: iCollectionSchema,
                        collectionChangelog: iCollectionChangelogSchema,
                        collectionId: z.number(),
                        collectionSchema: iCollectionSchemaSchema,
                        collectionSchemaId: z.number(),
                        contentPreviewLink: z.string(),
                        downloadLink: z.string(),
                        externalResources: z.array(iExternalResourceSchema),
                        fileSize: z.number(),
                        gameVersions: z.array(iGameVersionSchema),
                        id: z.number(),
                        installationInfo: z.string().optional(),
                        latest: z.boolean(),
                        metadata: iRevisionMetadataSchema,
                        modFiles: z.array(iCollectionRevisionModSchema),
                        rating: iRatingSchema,
                        revisionNumber: z.number(),
                        revisionStatus: z.string(),
                        status: z.string(),
                        updatedAt: iDateTimeSchema,
                        createdAt: iDateTimeSchema,
                    })
                    .optional(),
                title: z.string(),
                url: z.string(),
                user: iGraphUserSchema,
                verified: z.boolean(),
                updatedAt: iDateTimeSchema,
                createdAt: iDateTimeSchema,
            })
            .optional(),
        id: z.number(),
        slug: z.string(),
        media: z
            .object({
                altText: z.string(),
                collection: iCollectionSchema,
                discardedAt: iDateTimeSchema.optional(),
                id: z.string(),
                position: z.number(),
                revision: z
                    .object({
                        adultContent: z.string(),
                        bugReports: z.array(iCollectionBugReportSchema),
                        collection: iCollectionSchema,
                        collectionChangelog: iCollectionChangelogSchema,
                        collectionId: z.number(),
                        collectionSchema: iCollectionSchemaSchema,
                        collectionSchemaId: z.number(),
                        contentPreviewLink: z.string(),
                        downloadLink: z.string(),
                        externalResources: z.array(iExternalResourceSchema),
                        fileSize: z.number(),
                        gameVersions: z.array(iGameVersionSchema),
                        id: z.number(),
                        installationInfo: z.string().optional(),
                        latest: z.boolean(),
                        metadata: iRevisionMetadataSchema,
                        modFiles: z.array(iCollectionRevisionModSchema),
                        rating: iRatingSchema,
                        revisionNumber: z.number(),
                        revisionStatus: z.string(),
                        status: z.string(),
                        updatedAt: iDateTimeSchema,
                        createdAt: iDateTimeSchema,
                    })
                    .optional(),
                title: z.string(),
                url: z.string(),
                user: iGraphUserSchema,
                verified: z.boolean(),
                updatedAt: iDateTimeSchema,
                createdAt: iDateTimeSchema,
            })
            .and(
                z.array(
                    z.object({
                        collection: iCollectionSchema,
                        description: z.string(),
                        discardedAt: iDateTimeSchema.optional(),
                        id: z.string(),
                        position: z.number(),
                        revision: z
                            .object({
                                adultContent: z.string(),
                                bugReports: z.array(iCollectionBugReportSchema),
                                collection: iCollectionSchema,
                                collectionChangelog: iCollectionChangelogSchema,
                                collectionId: z.number(),
                                collectionSchema: iCollectionSchemaSchema,
                                collectionSchemaId: z.number(),
                                contentPreviewLink: z.string(),
                                downloadLink: z.string(),
                                externalResources: z.array(
                                    iExternalResourceSchema
                                ),
                                fileSize: z.number(),
                                gameVersions: z.array(iGameVersionSchema),
                                id: z.number(),
                                installationInfo: z.string().optional(),
                                latest: z.boolean(),
                                metadata: iRevisionMetadataSchema,
                                modFiles: z.array(iCollectionRevisionModSchema),
                                rating: iRatingSchema,
                                revisionNumber: z.number(),
                                revisionStatus: z.string(),
                                status: z.string(),
                                updatedAt: iDateTimeSchema,
                                createdAt: iDateTimeSchema,
                            })
                            .optional(),
                        title: z.string(),
                        url: z.string(),
                        user: iGraphUserSchema,
                        verified: z.boolean(),
                        updatedAt: iDateTimeSchema,
                        createdAt: iDateTimeSchema,
                    })
                )
            )
            .optional(),
        metadata: iCollectionMetadataSchema.optional(),
        name: z.string(),
        revisions: z.array(
            z.object({
                adultContent: z.string().optional(),
                bugReports: z.array(iCollectionBugReportSchema).optional(),
                collection: iCollectionSchema.optional(),
                collectionChangelog: iCollectionChangelogSchema.optional(),
                collectionId: z.number().optional(),
                collectionSchema: iCollectionSchemaSchema.optional(),
                collectionSchemaId: z.number().optional(),
                contentPreviewLink: z.string().optional(),
                downloadLink: z.string().optional(),
                externalResources: z.array(iExternalResourceSchema).optional(),
                fileSize: z.number().optional(),
                gameVersions: z.array(iGameVersionSchema).optional(),
                id: z.number(),
                installationInfo: z.string().optional(),
                latest: z.boolean().optional(),
                metadata: iRevisionMetadataSchema.optional(),
                modFiles: z.array(iCollectionRevisionModSchema).optional(),
                rating: iRatingSchema.optional(),
                revisionNumber: z.number(),
                revisionStatus: z.string(),
                status: z.string().optional(),
                updatedAt: iDateTimeSchema.optional(),
                createdAt: iDateTimeSchema.optional(),
            })
        ),
        tags: z.array(iTagSchema).optional(),
        tileImage: z
            .object({
                altText: z.string().optional(),
                collection: iCollectionSchema.optional(),
                discardedAt: iDateTimeSchema.optional(),
                id: z.string().optional(),
                position: z.number().optional(),
                revision: z
                    .object({
                        adultContent: z.string(),
                        bugReports: z.array(iCollectionBugReportSchema),
                        collection: iCollectionSchema,
                        collectionChangelog: iCollectionChangelogSchema,
                        collectionId: z.number(),
                        collectionSchema: iCollectionSchemaSchema,
                        collectionSchemaId: z.number(),
                        contentPreviewLink: z.string(),
                        downloadLink: z.string(),
                        externalResources: z.array(iExternalResourceSchema),
                        fileSize: z.number(),
                        gameVersions: z.array(iGameVersionSchema),
                        id: z.number(),
                        installationInfo: z.string().optional(),
                        latest: z.boolean(),
                        metadata: iRevisionMetadataSchema,
                        modFiles: z.array(iCollectionRevisionModSchema),
                        rating: iRatingSchema,
                        revisionNumber: z.number(),
                        revisionStatus: z.string(),
                        status: z.string(),
                        updatedAt: iDateTimeSchema,
                        createdAt: iDateTimeSchema,
                    })
                    .optional(),
                title: z.string().optional(),
                url: z.string(),
                user: iGraphUserSchema.optional(),
                verified: z.boolean().optional(),
                updatedAt: iDateTimeSchema.optional(),
                createdAt: iDateTimeSchema.optional(),
            })
            .optional(),
        user: iGraphUserSchema,
        userId: z.number().optional(),
        visible: z.boolean().optional(),
        description: z.string(),
        summary: z.string(),
        commentLink: z.string(),
        overallRating: z.string(),
        overallRatingCount: z.number(),
        recentRating: z.string(),
        recentRatingCount: z.number(),
    })
);

export const iRevisionSchema = iTimestampedSchema.extend({
    adultContent: z.string(),
    bugReports: z.array(iCollectionBugReportSchema),
    collection: iCollectionSchema,
    collectionChangelog: iCollectionChangelogSchema,
    collectionId: z.number(),
    collectionSchema: iCollectionSchemaSchema,
    collectionSchemaId: z.number(),
    contentPreviewLink: z.string(),
    downloadLink: z.string(),
    externalResources: z.array(iExternalResourceSchema),
    fileSize: z.number(),
    gameVersions: z.array(iGameVersionSchema),
    id: z.number(),
    installationInfo: z.string().optional(),
    latest: z.boolean(),
    metadata: iRevisionMetadataSchema,
    modFiles: z.array(iCollectionRevisionModSchema),
    rating: iRatingSchema,
    revisionNumber: z.number(),
    revisionStatus: z.string(),
    status: z.string(),
});
