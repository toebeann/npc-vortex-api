// Generated by ts-to-zod
import { z } from "zod";

export const iProfileModSchema = z.object({
  enabled: z.boolean(),
  enabledTime: z.number(),
});

export const iProfileSchema = z.object({
  id: z.string(),
  gameId: z.string(),
  name: z.string(),
  modState: z.record(iProfileModSchema),
  lastActivated: z.number(),
  pendingRemove: z.boolean().optional(),
  features: z.record(z.any()).optional(),
});

export const iToolStoredSchema = z.object({
  id: z.string(),
  name: z.string(),
  shortName: z.string().optional(),
  logo: z.string(),
  executable: z.string(),
  parameters: z.array(z.string()),
  environment: z.record(z.string()),
  shell: z.boolean().optional(),
  detach: z.boolean().optional(),
  onStart: z
    .union([z.literal("hide"), z.literal("hide_recover"), z.literal("close")])
    .optional(),
  exclusive: z.boolean().optional(),
  defaultPrimary: z.boolean().optional(),
});

export const iGameStoredSchema = z.object({
  id: z.string(),
  name: z.string(),
  shortName: z.string().optional(),
  logo: z.string().optional(),
  extensionPath: z.string().optional(),
  imageURL: z.string().optional(),
  requiredFiles: z.array(z.string()),
  executable: z.string(),
  parameters: z.array(z.string()).optional(),
  supportedTools: z.array(iToolStoredSchema).optional(),
  environment: z.record(z.string()).optional(),
  details: z.record(z.any()).optional(),
  shell: z.boolean().optional(),
  contributed: z.string().optional(),
  final: z.boolean().optional(),
});

export const modStateSchema = z.union([
  z.literal("downloading"),
  z.literal("downloaded"),
  z.literal("installing"),
  z.literal("installed"),
]);

export const iReferenceSchema = z.object({
  fileMD5: z.string().optional(),
  fileSize: z.number().optional(),
  gameId: z.string().optional(),
  versionMatch: z.string().optional(),
  logicalFileName: z.string().optional(),
  fileExpression: z.string().optional(),
});

export const ruleTypeSchema = z.union([
  z.literal("before"),
  z.literal("after"),
  z.literal("requires"),
  z.literal("conflicts"),
  z.literal("recommends"),
  z.literal("provides"),
]);

export const iRuleSchema = z.object({
  type: ruleTypeSchema,
  reference: iReferenceSchema,
  comment: z.string().optional(),
});

export const iModRepoIdSchema = z.object({
  gameId: z.string().optional(),
  modId: z.string().optional(),
  fileId: z.string(),
});

export const iModReferenceSchema = iReferenceSchema.extend({
  id: z.string().optional(),
  idHint: z.string().optional(),
  md5Hint: z.string().optional(),
  tag: z.string().optional(),
  archiveId: z.string().optional(),
  repo: z
    .object({
      repository: z.string(),
      campaign: z.string().optional(),
    })
    .and(iModRepoIdSchema).optional(),
  description: z.string().optional(),
  instructions: z.string().optional(),
});

export const iFileListItemSchema = z.object({
  path: z.string(),
  md5: z.string().optional(),
  xxh64: z.string().optional(),
});

export const iDownloadHintSchema = z.object({
  mode: z.union([
    z.literal("direct"),
    z.literal("browse"),
    z.literal("manual"),
  ]),
  url: z.string().optional(),
  instructions: z.string().optional(),
});

export const iModRuleSchema = iRuleSchema.extend({
  reference: iModReferenceSchema,
  fileList: z.array(iFileListItemSchema).optional(),
  installerChoices: z.any().optional(),
  downloadHint: iDownloadHintSchema.optional(),
  extra: z.record(z.any()).optional(),
  ignored: z.boolean().optional(),
});

export const iModSchema = z.object({
  id: z.string(),
  state: modStateSchema,
  type: z.string(),
  archiveId: z.string().optional(),
  installationPath: z.string(),
  attributes: z.record(z.any()).optional(),
  rules: z.array(iModRuleSchema).optional(),
  enabledINITweaks: z.array(z.string()).optional(),
  fileOverrides: z.array(z.string()).optional(),
});
